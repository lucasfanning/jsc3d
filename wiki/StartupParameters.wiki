#summary This document provides a detailed description of the viewer object's startup parameters for customizing the display.

= The Startup Parameters =

== SceneUrl ==

Set `SceneUrl` to URL of a model file so that the `viewer` will load it automatically. The loading will be started immediately after the `init()` call. This is very convenient for applications that just display a single model. The default value for this parameter is '' which lets the scene empty and only background will be drawn after the first `update()` call. And after initialization, the `replaceSceneFromUrl()` method can be used to begin to load the model at an appropriate moment.

== InitRotationX, InitRotationY and InitRotationZ ==

Set `InitRotationX`, `InitRotationY` and/or `InitRotationZ` to adjust the initial orientation of the model. Each value should be an angle (in degrees) that specifies rotation around the corresponding axis. By default there are no additional initial rotations and the model will displayed as defined.

== ModelColor ==

Set `ModelColor` to specify the color of the default material which will be used for rendering of meshes that do not have an own material. For example, an STL model does not contain any material information, so it will be rendered using the default material. An valid value for this parameter should be the color's string representation formated as `'#RRGGBB'`.

== BackgroundColor1 and BackgroundColor2 ==

Set `BackgroundColor1` and `BackgroundColor2` to customize the background colors. The first parameter defines the color on the topmost row and the other one defines that on the bottom row. Then color will be linearly interpolated from top down. Both parameters receive a string represented color that should be formated as `'#RRGGBB'`.

== BackgroundImageUrl ==

Set `BackgroundImageUrl` to URL of an image that will be used as the background. The loading will be started automatically after the `init()` call. The image will be scaled to fit the actual dimensions of the canvas. So it is recommended to adjust the image's size to be the same as the canvas in preparation to avoid distortion.

== RenderMode ==

Set `RenderMode` to specify the initial render mode the `viewer` adopts. Render mode controls how the model will be rendered. The following render modes are available in current implementation:

  * `point` - meshes will be rendered as points.
  * `wireframe` - meshes will be rendered as wireframe.
  * `flat` - meshes will be rendered using flat shading.
  * `smooth` - meshes will be rendered using smooth shading.
  * `texture` - meshes will be rendered as textured primitives with no lighting applied. If textures are unavailable, the `flat` mode will be used as the fallback.
  * `textureflat` - meshes will be rendered as textured primitives with lighting computed per face. If textures are unavailable, the `flat` mode will be used as the fallback.
  * `texturesmooth` - meshes will be rendered as textured primitives with lighting computed per vertex and then interpolated. If textures are unavailable, the `smooth` mode will be used as the fallback.

The default value for this parameter is `'flat'`. The `setRenderMode()` method can be used to change current render mode at runtime.

== Definition ==

Set `Definition` 

== MipMapping ==

== CreaseAngle ==

== SphereMapUrl ==

== ProgressBar ==